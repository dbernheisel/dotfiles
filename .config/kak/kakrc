# Swap : and ;
# : will now open the prompt
# ; will now clear the selection a single character
map global normal ';' ':'
map global normal ':' ';'

# map global user normal <space> 'ga'
# map global user 'gd' ':lsp-definition'
map global user '/' ':comment-line<ret>' -docstring "Comment Selected Lines"

# Set <space> to user mappings (leader key)
map global normal <space> , -docstring 'leader'

set-option global tabstop 2
set-option global indentwidth 2

add-highlighter global/ number-lines
add-highlighter global/ show-whitespaces -lf ' ' -spc ' ' -nbsp '⋅'
add-highlighter global/ show-matching

# map jj to <esc>
hook global InsertChar j %{ try %{
  exec -draft hH <a-k>jj<ret> d
  exec <esc>
}}

map global insert <tab> '<a-;><gt>'
map global insert <s-tab> '<a-;><lt>'

# Escape also removes selection
map global normal '<esc>' ' ;<esc>' -docstring 'remove all selection except main, reduce selection to cursor, and stop highlighting search matches'

# Enable <tab> to make completion selection
hook global InsertCompletionShow .* %{
  try %{
    execute-keys -draft 'h<a-K>\h<ret>'
    map window insert <tab>   <c-n>
    map window insert <s-tab> <c-p>
  }
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab>   <c-n>
  unmap window insert <s-tab> <c-p>
}

# use ripgrep as regex search tool
set-option global grepcmd 'rg -L --hidden --with-filename --column'


map global user <space> ':buffer-previous<ret>' -docstring 'Previous Buffer'

# map global normal '//' ": comment-line<ret>" -docstring "comment line"

# Remove tailing spaces on write
hook global BufWritePre .* %{ try %{ execute-keys -draft \%s\h+$<ret>d } }

try %{
  source "%val{config}/plugins/plug.kak/rc/plug.kak"
  plug "andreyorst/plug.kak" noload

  plug "markolenik/kakoune-darkokai-theme" domain "gitlab.com" config %{
    colorscheme darkokai
  }

  plug "alexherbo2/surround.kak"

  plug "andreyorst/fzf.kak" domain gitlab.com config %{
    map global normal <c-p> ': fzf-mode<ret>'
  } defer fzf %{
    set-option global fzf_highlight_command 'bat'
    set-option global fzf_terminal_command 'kitty-terminal'
    set-option global fzf_file_command 'fdfind --type f'
  }


  plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 2
  } config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(elixir|markdown|kak|sh) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|python) noexpandtab
  }


  plug "ul/kak-lsp" do %{
    cargo install --locked --force --path .
  } config %{
    set global lsp_cmd "kak-lsp -s %val{session} --config %val{config}/kak-lsp.toml"
    set global lsp_diagnostic_line_error_sign '║'
    set global lsp_diagnostic_line_warning_sign '┊'

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }

    hook global WinSetOption filetype=(elixir|ruby|shell|javascript|typescript) %{
      set-option window lsp_auto_highlight_references true
      set-option window lsp_hover_anchor false
      map window user <k> ':lsp-hover<ret>' -docstring 'LSP-Show Docs'
      echo -debug "Enabling LSP for filtetype %opt{filetype}"
      lsp-enable-window
    }

    hook global KakEnd .* lsp-exit
  }

  evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
  lsp-enable
}

# declare-option -docstring "name of git branch holding the current buffer" \
#   str modeline_git_branch


# hook global WinCreate .* %{
  # hook window NormalIdle .* %{
    # evaluate-commands %sh{
      # branch=$(cd "$(dirname "${kak_buffile}")" && git rev-parse --abbrev-ref HEAD 2> /dev/null)
#
      # if [ -n "%{branch}" ]; then
        # printf 'set window modeline_git_branch %%{%s}' "${branch}"
      # fi
    # }
  # }
# }

hook global WinSetOption filetype=(elixir) %{
  hook window BufWritePre .exs lsp-formatting-sync
  hook window BufWritePre .ex lsp-formatting-sync
}

# Yank/Paste should work with system clipboard
evaluate-commands %sh{
  case $(uname) in
    Linux) copy="xclip -i"; paste="xclip -o" ;;
    Darwin)  copy="pbcopy"; paste="pbpaste" ;;
  esac

  printf "map global user -docstring 'paste (after) from clipboard' p '!%s<ret>'\n" "$paste"
  printf "map global user -docstring 'paste (before) from clipboard' P '<a-!>%s<ret>'\n" "$paste"
  printf "map global user -docstring 'yank to primary' y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 primary}<ret>'\n" "$copy"
  printf "map global user -docstring 'yank to clipboard' Y '<a-|>%s<ret>:echo -markup %%{{Information}copied selection to X11 clipboard}<ret>'\n" "$copy -selection clipboard"
  printf "map global user -docstring 'replace from clipboard' R '|%s<ret>'\n" "$paste"
}

map global user -docstring "Enable Git keymap mode for next key" g ": enter-user-mode<space>git<ret>"

declare-user-mode git
map global git -docstring "blame - Show what revision and author last modified each line of the current file" b ': repl tig blame -C "+%val{cursor_line}" -- "%val{buffile}"<ret>'
map global git -docstring "commit - Record changes to the repository" c ": git commit<ret>"
map global git -docstring "diff - Show changes between HEAD and working tree" d ": git diff<ret>"
map global git -docstring "git - Explore the repository history" g ": repl tig<ret>"
map global git -docstring "github - Copy canonical GitHub URL to system clipboard" h ": github-url<ret>"
map global git -docstring "log - Show commit logs for the current file" l ': repl tig log -- "%val{buffile}"<ret>'
map global git -docstring "prompt - Run a free-form Git command prompt" p ":repl tig "
map global git -docstring "status - Show the working tree status" s ": repl tig status<ret>"
map global git -docstring "staged - Show staged changes" t ": git diff --staged<ret>"
map global git -docstring "write - Write and stage the current file" w ": write<ret>: git add<ret>: git update-diff<ret>"
